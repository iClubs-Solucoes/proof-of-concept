AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: Stack para teste de ECS com HTTP para scaling e roteamento de API Gateway

Parameters:
  Stage:
    Type: String
    Default: dev
    Description: Development stage of repository
  Region:
    Type: String
    Default: us-east-2
    Description: Aws region for deployment
  Tenant:
    Type: String
    Default: poc
    Description: Project tenant for deployment
  SubnetIds:
    Type: List<AWS::EC2::Subnet::Id>
    Description: VPC subnets list
  HasVPC:
    Type: String
    Default: "false"
  VPCId:
    Type: AWS::EC2::VPC::Id
  ScalingCooldown:
    Type: String
  CPUUtilization:
    Type: String
  MinPodsNumber:
    Type: String
  MaxPodsNumber:
    Type: String

Conditions:
  HasVPCCondition: !Equals [!Ref HasVPC, "true"]

Resources:

  # -----------------------------------------------
  # ECR
  # -----------------------------------------------

  ECRRepository:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: !Sub "${Stage}-${Tenant}-poc-ecs-http"
      Tags:
        - Key: Name
          Value: !Sub "${Stage}-${Tenant}-poc-ecs-http"

  # -----------------------------------------------
  # Cluster
  # ----------------------------------------------

  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub "${Stage}-${Tenant}-poc-ecs-http"
      Tags:
        - Key: Name
          Value: !Sub "${Stage}-${Tenant}-poc-ecs-http"

  # ---------------------------------------------
  # LOAD BALANCER
  # ---------------------------------------------

  ECSLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      LoadBalancerAttributes:
        # this is the default, but is specified here in case it needs to be changed
        - Key: idle_timeout.timeout_seconds
          Value: '60'
      # Name: !Join ['', [!Ref ServiceName, LoadBalancer]]
      # "internal" is also an option
      Scheme:  !If
        - HasVPCCondition
        - internal
        - internet-facing
      SecurityGroups:
        - !Ref ECSServiceSecurityGroup
      Subnets: !Ref SubnetIds

  ECSListenerHTTPS:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref ECSTargetGroup
          Type: forward
      LoadBalancerArn: !Ref ECSLoadBalancer
      Port: 80
      Protocol: HTTP

  ECSTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      # HealthCheckIntervalSeconds: 10
      # will look for a 200 status code by default unless specified otherwise
      HealthCheckPath: "/_info"
      # HealthCheckTimeoutSeconds: 5
      # UnhealthyThresholdCount: 2
      # HealthyThresholdCount: 2
      # Name: !Join ['', [!Ref ServiceName, TargetGroup]]
      Port: 80
      Protocol: HTTP
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: '60' # default is 300
      TargetType: ip
      VpcId: !Ref VPCId

  # ---------------------------------------------
  # ROLES
  # ---------------------------------------------

  TaskRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: "ecs-tasks.amazonaws.com"
            Action: "sts:AssumeRole"
      Policies:
        - PolicyName: !Sub "${Stage}-${Tenant}-poc-ecs-http-policy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - rds:*
                Resource: "*"
              - Effect: Allow
                Action:
                  - ssm:GetParameter
                Resource: "*"

  ExecutionRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
                - ecs.amazonaws.com
                - ecs-tasks.amazonaws.com
            Action:
              - "sts:AssumeRole"
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
        - arn:aws:iam::aws:policy/AmazonECS_FullAccess

  # ---------------------------------------------
  # API GATEWAY
  # ---------------------------------------------

  HttpProxy:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: ANY
      AuthorizationType: NONE
      RequestParameters:
        method.request.path.proxy: true
      Integration:
        RequestParameters:
          integration.request.path.proxy: 'method.request.path.proxy'
        Type: HTTP_PROXY
        IntegrationHttpMethod: ANY
        Uri: !Sub http://${ECSLoadBalancer.DNSName}/{proxy} # cdbbe4d4-8019-4775-9b97-e936e525a273
      ResourceId: !Ref ApiGatewayProxy
      RestApiId: !Ref ApiGatewayRestApi

  HttpProxy2:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: ANY
      AuthorizationType: NONE
      RequestParameters:
        method.request.path.proxy: true
      Integration:
        RequestParameters:
          integration.request.path.proxy: 'method.request.path.proxy'
        Type: HTTP_PROXY
        IntegrationHttpMethod: ANY
        Uri: !Sub http://${ECSLoadBalancer.DNSName} # cdbbe4d4-8019-4775-9b97-e936e525a273
      ResourceId: !Ref ApiGatewayResource
      RestApiId: !Ref ApiGatewayRestApi

  ApiGatewayResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt ApiGatewayRestApi.RootResourceId
      PathPart: v1
      RestApiId: !Ref ApiGatewayRestApi

  ApiGatewayProxy:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !Ref ApiGatewayResource
      PathPart: '{proxy+}'
      RestApiId: !Ref ApiGatewayRestApi

  ApiGatewayRestApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: http_ecs

  ApiGatewayDeployment:
    DependsOn: HttpProxy
    Type: AWS::ApiGateway::Deployment
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      StageName: poc
      
  # ---------------------------------------------
  # FARGATE
  # ---------------------------------------------

  ECSServiceLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 365
      LogGroupName: !Sub "${Stage}-${Tenant}-cluster-poc-ecs-http"

  ECSTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      ContainerDefinitions:
        - Name: !Sub "${Stage}-${Tenant}-server-poc-ecs-http"
          # EntryPoint: ["sh", "-c"]
          PortMappings:
            - ContainerPort: 80
          Image: !GetAtt ECRRepository.RepositoryUri
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref ECSServiceLogGroup
              awslogs-stream-prefix: !Sub "${Stage}-${Tenant}-poc-ecs-http"
              awslogs-region: !Ref Region
          Essential: true
      Cpu: "256"
      Memory: "512"
      ExecutionRoleArn: !GetAtt ExecutionRole.Arn
      TaskRoleArn: !GetAtt TaskRole.Arn
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Tags:
        - Key: Name
          Value: !Sub "${Stage}-${Tenant}-poc-ecs-http"

  ECSServiceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http to client host
      VpcId: !Ref VPCId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0

  ECSService:
    Type: AWS::ECS::Service
    DependsOn: ECSListenerHTTPS
    Properties:
      Cluster:
        Ref: "ECSCluster"
      DesiredCount: 0
      LaunchType: FARGATE
      TaskDefinition:
        Ref: "ECSTaskDefinition"
      LoadBalancers:
        - ContainerName: !Sub "${Stage}-${Tenant}-server-poc-ecs-http"
          ContainerPort: 80
          TargetGroupArn: !Ref ECSTargetGroup
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups: 
            -   !Ref ECSServiceSecurityGroup
          Subnets: !Ref SubnetIds
      Tags:
        - Key: Name
          Value: !Sub "${Stage}-${Tenant}-poc-ecs-http-service"

  # ---------------------------------------------
  # Auto Scaling
  # ---------------------------------------------

  AutoScalingRole:
    Type: AWS::IAM::Role
    Properties:
      # RoleName: !Join ['', [!Ref ServiceName, AutoScalingRole]]
      RoleName: !Sub ${Stage}-${Tenant}-autoscale-role-ecs
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceAutoscaleRole'

  AutoScalingTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MinCapacity: !Ref MinPodsNumber
      MaxCapacity: !Ref MaxPodsNumber
      ResourceId: !Join ['/', [service, !Ref ECSCluster, !GetAtt ECSService.Name]]
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs
      # "The Amazon Resource Name (ARN) of an AWS Identity and Access Management (IAM) role that allows Application Auto Scaling to modify your scalable target."
      RoleARN: !GetAtt AutoScalingRole.Arn

  AutoScalingPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: ecs-test-policy
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref AutoScalingTarget
      TargetTrackingScalingPolicyConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageCPUUtilization
        ScaleInCooldown: !Ref ScalingCooldown
        ScaleOutCooldown: !Ref ScalingCooldown
        # Keep things at or lower than 50% CPU utilization, for example
        TargetValue: !Ref CPUUtilization