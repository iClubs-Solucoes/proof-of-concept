AWSTemplateFormatVersion: "2010-09-09"
Transform: "AWS::Serverless-2016-10-31"

Parameters:
  ClusterName:
    Type: String
  LogGroupName:
    Type: String
  SQSName:
    Type: String
  TaskName:
    Type: String
  ServiceName:
    Type: String
  ECRRepositoryName:
    Type: String
  VPCSubnetA:
    Type: String
  VPCSubnetB:
    Type: String
  VPCID:
    Type: String
  SqsMessageVisibilityTimeout:
    Type: Number
  ScaleUpCoolDown:
    Type: Number

Resources:
  Cluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Ref ClusterName

  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Ref LogGroupName

  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    DependsOn: LogGroup
    Properties:
      Family: !Sub ${TaskName}Family
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Cpu: 256
      Memory: 0.5GB
      ExecutionRoleArn: !Ref ExecutionRole
      TaskRoleArn: !Ref TaskRole
      ContainerDefinitions:
        - Name: !Ref TaskName
          Image: !GetAtt ECRRepository.RepositoryUri
          EntryPoint:
            - "/bin/sh"
            - "-c"
          Command:
            - 'node -e ''require("/src/methods.js").fn_fargate()'''
          Environment:
            - Name: SQS_URL
              Value: !GetAtt SQSQueue.QueueUrl
            - Name: SQS_MESSAGE_VISIBILITY_TIMEOUT
              Value: !Ref SqsMessageVisibilityTimeout
            - Name: SCALE_UP_COOL_DOWN
              Value: !Ref ScaleUpCoolDown
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-region: !Ref AWS::Region
              awslogs-group: !Ref LogGroup
              awslogs-stream-prefix: ecs

  Service:
    Type: AWS::ECS::Service
    Properties:
      ServiceName: !Ref ServiceName
      Cluster: !Ref Cluster
      TaskDefinition: !Ref TaskDefinition
      DesiredCount: 0
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          Subnets:
            - !Ref VPCSubnetA
            - !Ref VPCSubnetB
          SecurityGroups:
            - !Ref InstanceSecurityGroup

  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VPCID
      GroupDescription: "Security group for Fargate + SQS Poc"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0

  SQSQueueDLQ:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub "${SQSName}DLQ"

  SQSQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Ref SQSName
      VisibilityTimeout: !Ref SqsMessageVisibilityTimeout
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt SQSQueueDLQ.Arn
        maxReceiveCount: 2

  QueueDepthAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: "Alarm if queue depth increases to more than 1 message"
      Metrics:
        - Id: sqsMessageVisibleAndInvisible
          Expression: SUM([sqsMessageVisible,sqsMessageInvisible])
          Label: SqsMessageVisibleAndInvisible
          ReturnData: true
        - Id: sqsMessageVisible
          MetricStat:
            Period: !Ref SqsMessageVisibilityTimeout
            Stat: Sum
            Unit: Count
            Metric:
              MetricName: ApproximateNumberOfMessagesVisible
              Namespace: AWS/SQS
              Dimensions:
                - Name: QueueName
                  Value: !GetAtt SQSQueue.QueueName
          ReturnData: false
        - Id: sqsMessageInvisible
          MetricStat:
            Period: !Ref SqsMessageVisibilityTimeout
            Stat: Sum
            Unit: Count
            Metric:
              MetricName: ApproximateNumberOfMessagesNotVisible
              Namespace: AWS/SQS
              Dimensions:
                - Name: QueueName
                  Value: !GetAtt SQSQueue.QueueName
          ReturnData: false
      EvaluationPeriods: "1"
      Threshold: "0"
      ComparisonOperator: "GreaterThanThreshold"
      ActionsEnabled: TRUE
      AlarmActions:
        - !Ref ScaleUpPolicy
      OKActions:
        - !Ref ScaleDownPolicy

  ExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: PocExecutionRoleECS
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: "sts:AssumeRole"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy"

  TaskRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: PocTaskRoleECS
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: "sts:AssumeRole"
      Policies:
        - PolicyName: CooperDefaultLambdaPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - sqs:*
                  - dynamodb:*
                Resource: "*"

  AutoScalingTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MinCapacity: 0
      MaxCapacity: 4
      ResourceId: !Join ["/", [service, !Ref Cluster, !GetAtt Service.Name]]
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs
      RoleARN: !GetAtt AutoScalingRole.Arn

  AutoScalingRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: PocAutoScalingRoleECS
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: "sts:AssumeRole"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceAutoscaleRole"

  ScaleUpPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: !Sub "${Service}ScaleUpPolicy"
      PolicyType: StepScaling
      ScalingTargetId: !Ref AutoScalingTarget
      StepScalingPolicyConfiguration:
        AdjustmentType: ChangeInCapacity
        Cooldown: !Ref ScaleUpCoolDown
        MetricAggregationType: Average
        StepAdjustments:
          - MetricIntervalLowerBound: 0
            ScalingAdjustment: 1

  ScaleDownPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: !Sub "${Service}ScaleDownPolicy"
      PolicyType: StepScaling
      ScalingTargetId: !Ref AutoScalingTarget
      StepScalingPolicyConfiguration:
        AdjustmentType: ChangeInCapacity
        Cooldown: !Ref SqsMessageVisibilityTimeout
        MetricAggregationType: Average
        StepAdjustments:
          - MetricIntervalUpperBound: 0
            ScalingAdjustment: -1

  ECRRepository:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: !Ref ECRRepositoryName
      RepositoryPolicyText:
        Version: "2012-10-17"
        Statement:
          - Sid: AllowPushPull
            Effect: Allow
            Principal:
              AWS:
                - "*"
            Action:
              - "ecr:GetDownloadUrlForLayer"
              - "ecr:BatchGetImage"
              - "ecr:BatchCheckLayerAvailability"
              - "ecr:PutImage"
              - "ecr:InitiateLayerUpload"
              - "ecr:UploadLayerPart"
              - "ecr:CompleteLayerUpload"
